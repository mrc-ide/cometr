#!/usr/bin/env Rscript
pkgload::load_all()

## At present, the app reads in data from various json files,
## themselves derived from the nimue_js release and the periodic
## fitting that OJ runs. We don't want to fetch these very often, so
## we'll collect it up and do some basic processing and store it in
## the package. We might load this and leave it all available to the
## process, or we might load on demand.
update_country_data <- function(country, dest = NULL) {
  message(sprintf("Updating '%s'", country))
  d <- build_country_data(country)
  if (is.null(d)) {
    message("...fit not found")
  } else {
    dest <- dest %||% cometr_file("extdata")
    path <- file.path(dest, paste0(country, ".rds"))
    dir.create(dest, FALSE, TRUE)
    saveRDS(d, path)
  }
}


build_country_data <- function(country) {
  base_params <-
    "https://raw.githubusercontent.com/mrc-ide/global-lmic-reports/master"
  base_vacc <-
    "https://github.com/mrc-ide/nimue_js/releases/download/v1.0.10"
  url_params <- file.path(base_params, country, "input_params.json")
  url_vacc <- file.path(base_vacc, paste0(country, ".json"))

  name <- squire::population$country[squire::population$iso3c == country][[1L]]
  contact <- squire::get_mixing_matrix(name)
  population <- squire::get_population(name)

  params_json <- tryCatch(suppressWarnings(
    jsonlite::read_json(url_params)),
    error = function(e) NULL)
  if (is.null(params_json)) {
    ## No data for this case.
    return(NULL)
  }
  params <- process_params(jsonlite::read_json(url_params), population)
  vacc_strategy <- process_vacc_strategy(jsonlite::read_json(url_vacc))

  mixing_matrix <- squire:::process_contact_matrix_scaled_age(
    squire:::get_mixing_matrix(iso3c = country), population$n)

  list(country_code = country,
       country_name = name,
       params = params,
       vacc_strategy = vacc_strategy,
       contact = contact,
       mixing_matrix = mixing_matrix,
       population = population)
}


process_params <- function(params, population) {
  ret <- data.frame(
    date = as.Date(vcapply(params, "[[", "date")),
    date_offset = vnapply(params, "[[", "tt_beta"),
    deaths = vnapply(params, function(x) x$deaths %||% NA_real_),
    beta = vnapply(params, "[[", "beta_set"),
    beta_min = vnapply(params, "[[", "beta_set_min"),
    beta_max = vnapply(params, "[[", "beta_set_max"),
    Rt = vnapply(params, "[[", "Rt"),
    stringsAsFactors = FALSE)

  last_date <- max(which(!is.na(ret$deaths)))

  if ("max_vaccine" %in% names(params[[1]])) {
    ## Get vaccine data if in input parameters - currently this does
    ## not happen but in future will
    ret$max_vaccine <- vnapply(params, "[[", "max_vaccine")
  } else {
    ret$max_vaccine <- 0
  }

  ret[seq_len(last_date), ]
}


process_vacc_strategy <- function(vacc) {
  list(
    hcw_elderly = matrix(unlist(vacc$whoPriority), ncol = 17),
    hcw_elderly_high_risk = matrix(unlist(vacc$etagePriority), ncol = 17))

}


countries <- sort(unique(squire::population$iso3c))
dest <- file.path(cometr_file(), "extdata")

unlink(dest, recursive = TRUE)
dir.create(dest, FALSE, TRUE)
for (name in countries) {
  update_country_data(name, dest)
}

## Create a test set for faster running by stripping out the data
## except the first few days.
message("Updating 'TEST'")
d <- country_data("GBR")
d$params <- d$params[1:40, ]
d$country_code <- "TEST"
saveRDS(d, file.path(dest, "TEST.rds"))

## Index used for the countries endpoint
message("Updating index")
files <- dir(dest, pattern = "^[A-Z]+\\.rds$", full.names = TRUE)
dat <- lapply(files, readRDS)
index <- data.frame(
  code = vcapply(dat, "[[", "country_code"),
  name = vcapply(dat, "[[", "country_name"),
  date = vcapply(dat, function(x) as.character(last(x$params$date))),
  stringsAsFactors = FALSE)
index$public <- !(index$code %in% "TEST")

saveRDS(index, file.path(dest, "index.rds"))
